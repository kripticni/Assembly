Credits to:

1. Creel on youtube for his material, [mostly finished]
mainly focusing on the hardware specifics
https://www.youtube.com/@WhatsACreel

2. kupala on youtube for his material, [finished]
mainly focusing on the linux interactions with asm
https://www.youtube.com/@khoraski

3. Mike Shah, for his gasm beginner course, [finished]
discrete maths, and C programming series and courses
https://www.youtube.com/@MikeShah

4. AMD architecture programmer's manual [unfinished]
https://www.amd.com/content/dam/amd/en/documents/processor-tech-docs/programmer-references/24592.pdf

5. This index/wiki/lookup for instructions on the web
https://www.felixcloutier.com/x86/

6. Nasm docs

7. OpenSecurityTraining2 Course Arch1001
https://apps.p.ost2.fyi/learning/course/course-v1:OpenSecurityTraining2+Arch1001_x86-64_Asm+2021_v1

8. CMU architecture class
http://csapp.cs.cmu.edu/


Syntax:

Intel Syntax:
-Preferred nowadays
-Dst <- Src
-Decorators:
  1. [] for dereferncing
  2. ; for comments
  3. Offsets written as '+ bytes'
  mov rax, [rbp+8]
  4. Displacement
  mov rax, [eax + ecx*2 + 4]
  5. Declaring size
  Before a value simply put dword or qword or qword ptr...
  byte, word, dword, qword
mov rbp, rsp
add rsp, 0x14 
(rsp = rsp + 0x14)

AT&T syntax:
-Preferred on *nix
-Src -> Dst
-Decorators:
  1. % for registers
  2. $ for values
  3. # for comments
  4. Offsets go before the base register
  5. () for dereferencing
  mov 8(%rbp), rax
  6. Displacement
  mov 4(%eax, %ecx, 2), rax
  means eax + ecx*2 + 4
  7. Declaring size changes the instruction mnemonic
  bytes, words, longs, quad words
  movb, movw, movl, movq
  8. Changes the names of some instructions
  movsx -> movsbw
  from move sign extend to move sign byte to word
  cwde -> cwtl
  convert sign extend to convert word to long
  Harder to look up


Registers:

Flags contain 1 bit each, aka boolean
They are used to determine control flow
CF = Carry
PF = Parity
ZF = Zero
SF = Sign
OF = Overflow
AF = Adjust
IF = Interupt Enabled

Pointers, I know this from C:
rip, eip, ip = index pointers
rsp, esp, sp = stack pointers
rbp, ebp, bp = stack base pointers
... much more

Control Flow is the direction of the program flow,
the index pointer (rip) determines which line is next to execute

Control Flow calls:
loop, changing rip based on rcx
jmp, changing rip
cmp, used for setting a flag
  a==b sets ZF = 1
  a!=b sets ZF = 0
  SF will be the most significant bit of a-b
Conditional Jumps:
  Pretty much same as bash, equal, not equal, less than...
  and it does depend on flags

'''asm
  cmp rax, 23
  je _doThis
'''
Moves to the label if rax is equal to 23.

Also
'''asm
  mov rax, rbx ; same as int a = b in C
  mov rax, [rbx]; would do int a = *b in C
'''
[rbx] is the address, however you can only do this
with 64bit registers, since thats the size of pointers


Calls are pretty much jumps to specific functions,
you need a defined block with a ret at the end, and they
work by changing rip and then changing it back with ret.

The stack works with 64 bit values, so when you are
pushing a value from memory into the stack, you need
to convert it to a qword (quad word is 64 bits).

The stack at the beginning stores in this sequence:
-argc
-path
-argv[1]...

Writing to files also depends on the linux permissions,
it the same octal values you learn when you start getting
into file management, so I won't go over this.
SYS_OPEN returns you a file descriptor into the rax register.

db == define bytes
dw == define word, 16 bits/2 bytes
dd == define double word, 32 bits/4 bytes
dq == define quadruple word, 64 bits/8 bytes
This is pretty elementary but I guess important so I'll leave it here.

sys_nanosleep takes a struct of timespec.
the two arguments are both pointers, so you need in
defined in the main memory.


Including C functions need to be linked with the C standard
This is achieved by assembling a .asm file with nasm, and:
> gcc -no-pie {}.o -o {} -lc
and it would successfully link if you follow the C asm format.

This includes having a defined main label.
And a prologue:
'''asm
  push rbp
  mov rbp, rsp
'''

And an epilogue:
'''asm
  leave
  ; which is actually just
  ; mov rsp, rbp
  ; pop rbp
'''

And a ret at the end so to not cause a seg fault and exit propertly.

Also important to mention that the heap and the stack are both
found in the RAM, the program's stack is mostly static, while
the heap is dynamic and done at runtime with syscalls.
(which is very slow)
The heap is also worse for cache locality but we can get virtually
unlimited space, which is not the case for the stack.

The heap also consists of a fragmentator, I won't go into this
since fragmentation is pretty trivial.
The main point is that the stack never needs to use a fragmentator.

This is also an insanely good case for how slow linked lists are
compared to arrays and even vectors (ArrayLists).
And it can be also used for the support of linear allocators or arenas.

If all of the above is done correctly, the heap can be about just as
fast as the stack, when it comes to memory accessing, altho it's
allocation is awfully slow.

BUT, its actually possible to resize variables on the stack, altho it would
require a new allocated memory space to keep the current heap, popping until we reach
the variable, resizing the variables needed, and the pushing back.
(This is also really slow, but I suppose its possible)

16-bit 8086:
ax, ah/al, general purpose
bx, bh/bl, general purpose (used in the c++ compiler by microsoft)
cx, ch/cl, general purpose (often as the counter and for loops)
dx, dh/dl, general purpose
si, source index
di, destination index
cs, segment
ds, segment
es, segment
ss, segment
flags (Comparisons and branching things alike, at the top of the txt file)

Segments were used for segmented memory, but now we have flat memory.

32-bit 80386:
eax, ax, ah/al, general purpose
ebx, bx, bh/bl, general purpose
ecx, cx, ch/cl, general purpose
edx, dx, dh/dl, general purpose
esi, si, source index
edi, di, destination index
ebp, bp, base pointer
esp, sp, stack pointer
eip, ip, instruction pointer
eFlags, Flags, just the basic flags

And also the deprecated segment registers:
cs, ds, es, ss, fs, gs
fs and gs were additions the segment registers
instead of the increase in size of the existing ones.

Pentium IV, first x64:
rax, eax, ax, ah/al, general purpose
rbx, ebx, bx, bh/bl, general purpose
rcx, ecx, cx, ch/cl, general purpose
rdx, edx, dx, dh/dl, general purpose
rsi, esi, si, sil, source index (xil variant to get to the lowest)
rdi, edi, di, dil, destination index
rbp, ebp, bp, spl, base pointer (also the xpl)
rsp, esp, sp, bpl, stack pointer
rip, eip, instruction pointer (loss of ip)
r8, r8d, r8w, r8b, general purpose
r9, r9d, r9w, r9b, general purpose
r10, r10d, r10w, r10b, general purpose //new registers, D for double
r11, r11d, r11w, r11b, general purpose //word, so 32 bytes
r12, r12d, r12w, r12b, general purpose //W for word or 16 bits
r13, r13d, r13w, r13b, general purpose //B for byte or 8 bits
r14, r14d, r14w, r14b, general purpose //so total 17 registers in total
r15, r15d, r15w, r15b, general purpose //ax-ip regs didn't change for compat
RFlags, EFlags, Flags, just the basic flags

Using instructions with 32 bit registers will zero the top of 64 bit ones
however 8 bit and 16 bit dont, however you can still write x64 as x86
and that is why there is program compatability.

Using original registers generates more efficient machine code
since the newer x64 registers and instructions add a REX prefix
in the machine code translation.

There are also further registers that are used for the internals
of the processor and not for user programs.
Such as:
- Control registers
- Debug registers
- Descriptor table registers
- Task register
- Extended feature enable register
- System Configuration register
- System-linkage registers
- Memory typing registers
- Performance monitoring registers
- Machine Check registers

Datatypes in x64:
Integers consist of byte, word, dword and qword
Ints can also be signed or unsigned, but you keep track of that
Floating points are real4, real8, real10
and the SIMD pointers are xmmword, ymmword, zmmword

all real types are IEEE754
real4 is single precision float:
1 bit sign
8 bit exponent
23 bit mantissa

real8 is double precision:
1 bit sign
11 bit exponent
52 bit mantissa

real10 which is not available in all compilers
and is only used in X87 FPU, amazing precision
is extended precision float:
1 bit sign
15 bit exponent
64 bit mantissa

SIMD packed data:
xmmword: 128 bits (SSE packed)
ymmword: 256 bits (AVX)
zmmword: 512 bits (AVX512, not in all cpus)

To achieve signed integers you must use I's complement or II's complement
and they are pretty similar

I's complement:
-Positive numbers remain unchanged
-Negative numbers will get all the bits flipped
-The left most bit is the sign bit, if its 0 a number is positive
So +5 = 0101b but -5 = 1010
This leads to there being 2 representations of zero
aka 00000000 and 11111111, for positive and negative zero

When adding numbers in I's complement, if there is a carry
from the most significant bit, it will be added to the least significant bit
this process is called the end-around carry

II's complement:
-Positive numbers remain unchanged
-The left most bit is the sign bit, if its 0 a number is positive
for negative numbers, just flip all bits and then add 1

This gives you only a value for zero
and also simplified arithmetic since there is not special rules

Endianness:
The order of how bytes are stored in memory according to their
significance, in modern architectrures we use Little Endian, which means
the least significant byte is at the lowest address

bswap is useful for this since it reverses all the bytes in a register
bswap 32/64 bit register

to exchange to 16 bit words, you'd do
xchg 16 reg, 16 reg

Instructions:
mov, only loads value
mov ax, [RBP+RSI+5] ; gets the value at that address
mov is also the only instruction that allows for immediate
64 bit operands, others will cause sign extension.

sign extension means that if the 31th bit is a 1, all the rest
would become 1s as well so 0xfffff...

movzx, is the same as mov except it zero extends the smaller source operand


lea, loads/calculates effective address
lea ax, [RBP+RSI+5] ; gets the adress


Arithmetic:

Add only adds, obviously
however you can use
add REG, 0
to update the flags according to the reg

you can also do
add REG, 1
to increment but also update the carry flag

and since add is faster than mul
doing
mov rax, 2
mul rbx
mov rbx, rax

is slower than

add rbx, rbx

there is also adc, which will add the carry flag too
and aaa which will adjust for ascii after addition


Sub, only subtracts, obviously
overflow means a signed borrow
carry means unsigned borrow
a quick way to zero is sub reg, reg
however
xor reg, reg ; is faster
sub reg, 1 is the same a dec reg, except it affects the carry flag

there is also sbb, which is a subtracton with borrow, aka carry

Mul, multiplication
Imul, unsigned multiplication
Div, division, if rdx is not zero it concats with rax to a 128 bit register
Idiv, same as above, and if the rdx is empty then the remainder is stored there

Boolean algebra:
xor
or
and
not
Pretty simple, and I dealt with this a bunch so I won't go into it
and it's pretty much an entire seperate field.
obviously out of this you can make more complex gates.

the test instruction just performs a boolean and
and it does not set the answer to the first input
but it does set the flags: sign, parity, zeroflag

Bit manipulations:

shifts:
shl
shr

if the final bit shifts out, it will set the carry flag as one.
With a positive signed number, its faster to shr than div 2.
(Unless you shift into the sign bit)
Also with unsigned numbers, it has no downsides.

arithmetic shifts:
sal
sar

Fix all of the problems with regular shifts, but at a cost of
performance.

rotate:
rol
ror

This for whatever reason does not exist in the C standard.
Altho compilers may recognize similar functions.
Its shifting to one side except it's like a looped list.

rotate through the carry flag:
rcl
rcr

Sets the carry flag as an extra bit, so registers would act
as if they were 65 bit, pretty much just concats and then shifts.
Hard to implement in many languages.

double precision shifts:
rold
rord

Concats two registers so we get 128 bits, and then shifts them.

bit scans:
There are two instructions, forwards and reverse

bsf ax, bx
goes from the lowest bit and wherever it finds the 1
it will set the ax to that index

bsr ax, bx
does the same in reverse, but it will give the index
from the right side anyways (won't reverse the order of indexing)

bit tests:
BTR - bittest reset to 0
BTS - set to 1
BT - is bittest
BTC - bit test then complement

sets the carry flag to bit[x] of reg
bt reg, {imm/reg}

Basic Flags:
0 - CF, carry, an unsigned overflow
2 - PF, parity, old, backwards compat for data transmission
4 - AF, auxiliary, not applicable in x64, overflow or carry of lowest 4 bits (nibble)
6 - ZF, zero, if result is zero then set to 1
7 - SF, sign, 1 for negative, 0 for positive
8 - TF, trap, allows for debuggers to step through the code
9 - IF, interrupt, allows interrupts to be called
10 - DF, direction, 0 reading string forwards, 1 for backwards
11 - OF, overflow, a signed overflow
12,13 - IOPL, shows IO port privilege level
14 - NT, shows if this task is nested
Some flags are general purpose but most are not in use.

pushfq would push the entire flag register to the stack,
popfq would get the top of the stack into the flag register.

Other flags:
15 - MD, mode flag NEC V-series only
16 - RF, resume flag, used to manage floating point exceptions in the FPU
17 - VM, virtual mode, a hardware virtualization technique
18 - AC, alignment check, if 0 the processor does not generated expections for misaligned memory
19 - VIF, virtual interrupt, Pentium+
20 - VIP, virtual interrupt pending, Pentium+
21 - ID, able to use the CPUID instruction on Pentium+
30 - (none), AES key schedule loaded flag (VIA PadLock only)
31 - AI, Alternate Instruction Set, enabled VIA C5XL processors only

Flag instructions:
std - set direction flag to 1
cld - clear direction flag to 0
cmc - complement carry flag
there is also this for other flags which I wont go over.

Rflags are reserved.

Without the capability to do things conditionaly, computers would be
severly underpowered because they could only execute simple programs.
Conditions operate by checking flags and branching accordingly.

Conditionals:
Jumps/jcc, if the condition cc is true, the processor would only change
the instruction pointer by a relative offset, which in return will change
the next line of instructions.

Loops/loopcc, decrement rcx until condition is met

Moves/cmovcc, if cc then it moves, it also doesn't support immediate
values, nor 8 bit version.

Set Byte/setcc, if true, then it sets the byte to 00000001, else 0

CC:
JE/JZ: Zero
JNE/JNZ: Not Zero
JO: Overflow
JNO: Not Overflow
JB/JC/JNAE: Carry Unsigned
JNB/JNC/JAE: Not Carry Unsigned
JBE/JNA: Below or Equal Unsigned
JNBE: Above Unsigned
JS: Sign
JNS: Not Sign
JP/JPE: Parity Even
JNP/JPO: Parity Odd
JL/JNGE: Less Signed
JNL/JGE: Not Less Signed
JLE/JNG: Not Greater Signed
JNLE/JG: Greater Signed

To set these flags accordingly, you can really use
any instruction that sets certain flags.

Calling convention:

-Prologue: setup the local data and rbp = rsp
 //its important to save rbp so that relative addressing
 //remains the same even when there is more data pushed
 //onto the stack
push rbp
mov rbp, rsp
; if you have local data, you need to sub rsp, 8*argc
; to access local vars, its [rbp - x],
; to access args its, [rbp + x]

-Epilogue: put everything back, aka rsp == rbp
 //to immediatly get rid of every on the stack
 //until your rbp, you can simply mov rsp, rbp
 mov rsp, rbp
 pop rbp
 ret

Windows "C" Calling Convention
The first 4 args are stored in the registers
xmm0 are used for floating points, while regular regs
are for ints, pointers, arrays, objs
1st: rcx/xmm0
2nd: rdx/xmm1
3rd: r8/xmm2
4th: r9/xmm3
The rest get pushed to the stack.

The return value can be found in the rax register.

Linux Calling Convention
When calling from the commandline, the arguments are
stored like this.
The stack at the beginning stores in this sequence:
-argc
-path
-argv[1]...
Within functions, the first 6 args are
rdi, rsi, rdx, rcx, r8, r9
and the rest are pushed onto the stack
rax is the return value
rdx is optionally the 2nd return value
rbx is optionally used as a base pointer

Also for functions that are always
considered as leaf functions you are
allowed to use the "red zone", 
this is all undefined memory that is
128 up to bytes below rsp and it is reserved

[[gnu::naked]] with inline assembly works 
nicely for achieving this
[[gnu::nocf_check]] for disable CET and
compile with -fcf-protection

Structures in Assembly:
In nasm, you start a struct by doing
struc *name*
  *var1*: resd/resw/resb...
  *var2*...
  ...
endstruc

The correct way of accessing structs is doing
mov ax, [*name_struct*+*varx*]

to have multipul structures with the same members
you should prepend the variable with a dot
in that case you would do
mov ax, [*name_struct*+*name.var*]

to make an instance of a struct in your data segment
you do something like this

*name_struct*:
  istruc *name*
    at *var1*, dd 12321
    at *str1*, db "hello world"
  iend

puting *at* before var names will force them to be
defined in the same order as written

to create an uninitalized instance you just put the
"?" inside the dd/db/... field

also the dup keyword duplicates so
3 dup(0), would duplicate 3 zeroes

assembler doesn't know about classes and it does
not care about private nor public, methods don't
get defined, so its the same as structs

for a union, you would just say one symbol is
the same as another, so just use
  var1 resd 1
  var2 equ var1

if you want the full capabilities of unions
you need to implement unions yourself
since there is no native union support

nested structures are quite simple
in the struc declaration you would want to
reserve bytes for the struct

struc inner_struct
  var1: resw1
  var2: resb 30
endstruc

struc outer_struct
  var1: inner_struct
  var2: resw 1
endstruc

and for nested structs we actually need to
use the dot operator
  mov ax, [outer_struct_instance.var1.var2]
this would lead to the resb 30


SIMD:
Single Instruction Multipul Data (MIMD AND MISD also exist)
To achieve higher performance, architects started creating
processors with higher clock speeds, but that leads to more
power drawing, as a solution they started making processors
with multipul cores and achieveing paralelism
... and at last SIMD and vectorized instrucitons

The instruction sets are:
-x64: SSE, AVX, AVX512, MMX, BMI, (TBM, XOP in amd) (FMA in addition)
-arm: neon, sve...
-risc-v...

MMX (1997): MM0-MM7
SSE (1999): XMM0-XMM15
AVX (2011): YMM0-YMM15
AVX512 (2016): ZMM0-ZMM15
512/256/128/64

MMX doesn't stand for anything, but its used in
a way that we split up the registers so that we
can do a single instruction on its multipul data

SIMD can do operations on as much variables you can
fit within a single 128 bit space, so for example
it can do operations on 2 quad words at the same time.

Data needs to be aligned aka evenly divisible by
some number the instruction and data decide.

MMX info:
x87 FPU is the unit that executes the actual mmx instructions,
so mmx0-mmx7 is the same as st0-st7, they are just aliased
but calling mmx and st will changed the mode of the FPU
Modes:
-Floating Point Instruction Set
-Multimedia State
when you are finished using mmx in a function,
you need to restore the state of the fpu so that
it can execute floating point arithmetic, you do this by
'''asm
  xmms ; exit multimedia state
'''
for inputing data into the mmx registers, you use
mov[b/w/d/q]
padd[b/w/d/q] will add the packed bytes from one reg
to another, all at the same time

MMX instructions:
[packed]
[add/sub]
[signed/unsigned]
[saturation/wrap]
[bytes/words/dwords]
example: paddusw
and the add/sub arithmetic operations would do as intended

saturation means that things that overflow will be filled to the max
value (signed or unsigned), wrap means after overflow they will go to
the lowest value

[packed]
[mul]
[low/high]
[signed/unsigned]
[word/dword/quad]
example: pmulld

pmaddwd (the fused multiply add)
would first multiply the data segments
accordingly, and then it would add the two lower
segments and the two upper segments and merge them
wd stands for words to double words

pmaddubsw,
unsigned bytes saturate to signed word

logical vs arithmetic shifts
logical shifts fill the shifted part with 0s
the arithmetic fill it with 1s or 0s, depending on the sign
(made so you can divide with signed)
shl and sal perform the same exact thing
while sar and shr differ

[packed]
[shift]
[logical/arithmetic] (unsigned/signed)
[right/left]
[byte/word/dword/quad]
and there is no arithmetic shift for qwords

multiply = shift left
divide = shift left
the first operand stores the values, the second one
the amount of bits to shift

Packing and unpacking, the args are mmx and mmx or mem64
Converting large types to smaller ones is packing,
MMX packing is always saturated (signed or unsigned)
[pack]
[signed/unsigned]
[saturation]
[double to word/word to byte]

example:
op 1: b1,a1
op 2: b2,a2
all dwords get shortened to words
ans in op1: b2,a2,b1,a1

Unpacking
[pack]
[unpack] {unpck}
[low/high] (choose if you want to unpack the low or the high 32 bits)
[bw/wd/dq]
example: (punpcklbw)
op 1: h1,g1,f1,e1 d1,c1,b1,a1
op 2: h2,g2,f2,e2 d2,c2,b2,a2
ans: d2,d1,c2,c1,b2,b1,a2,a1
so they get crossed over

Extending
'''asm
  pxor mm7, mm7
  punpcklbw mm0, mm7
  ; this would zero extend all words
'''
'''asm
  movq mm7, mm0
  psraw mm7, 15
  punpcklwd mm0, mm7
  ; sign extends all dwords
'''
'''asm
  mov al, 'A' ; since you cant move immediates into mmx
  and eax, 0ffh ; clears the top of eax, for saturation
  movd mm0, eax ; clears the top of mm0, and the first 8 bits are al
  punpckldq mm0, mm0 ; gives 000A000A
  packssdw mm0, mm0  ; gives 0A0A0A0A
  packuswb mm0, mm0  ; gives AAAAAAAA
  ; effectively broadcasts all bytes
'''

Boolean and comparison:
[packed]
[and/or/xor/andn]
*and not* is a new opperation from standard x64
boolean instructions dont have size specifications

andn flips all bits in op1, and then ands with op2
so it would look as: (!A) & (B)
this was included to help with the comparison instructions

setting a register to all zeroes is as simple as
  pxor reg, reg
or even
  pandn reg, reg


[packed]
[cmp]
[equality/greater] {eq/gt} (GREATER THAN IS ALWAYS SIGNED)
[b/w/d] (what sizes to compare)
the elements in op1 are compared to the corresponding
elements in op2, if they pass, all bits are ones
if they dont, all bits are zeroes

gt is always signed, so for example a byte value higher
than 128 will get converted to a negative, which might be
difficult to track

to set all to 1s
  pcmpeqb reg, reg
to all 0s
  pcmpgtb reg, reg

to flip all the bits
  pcmpeqb mm7, mm7 ; set to all 1s
  pxor mm0, mm7    ; xor with 1 flips all values

to get gte (greater than or equal to)
  pmov mm7, mm0
  pmov mm6, mm0
  pcmpgtb mm7, mm1
  pcmpeqb mm6, mm1
  por mm7, mm6 ; so now this gives the >=
  ; you can optimize by not saving mm0

you can figure out != and < and <=

branching and simd dont really mix together
its hard but possible, and certaintly worth it


SSE info:
Streaming Simd Extensions
for packed data aka simd you just add *ps at the end
of an instruction, if you for some reason want to do
it with a scalar, you'd do *ss, pretty simple
the s at the end stand for single precision tho
you can change it for a d for double precision
if its unaligned you add *u* before the sufix
xmm are the registers for SSE2, 128 bits wide
8 regs for x86, 16 regs for x64
mmx instructions are 3 bytes long instead of sse's 4
mmx registers have more space
some embedded microprocessors may not have sse2?
however there is practically no reason to ever use mmx
sse is much more flexible with the ability for floating points
SSE - single precision floating
SSE2 - double precision floating point, integers
SSE3 - horizontal instructions (within a single register)
SSSE3 - supplemental sse3 instructions (more horizontals)
SSE4.1 - dot products, blends, min/max of ints, etc...
SSE4.2 - few more misc. instructions
SSE4a - amd extension, not supported by intel, pop counting and etc...

Microsoft's x64 Calling Convention passes floats via SSE
in the lowest 32/64 bits, xmm0-xmm3

They come with a new control register, MXCSR
Multimedia Extension Control and Status Register
used to handle rounding functions, handling subnormal values, exceptions...

Understanding SSE data movement requires understanding data alignment

in nasm you can do
segment code private align=16
which makes it private and aligned by 16 bytes

PRIVATE segments do not get combined with any others by the linker;
PUBLIC and STACK segments get concatenated together at link time;
and COMMON segments all get overlaid on top of each other rather than stuck end-to-end.

Align is used to specify how many low bits of the segment start address must be forced to zero.
the only values supported are 1, 2, 4, 16, 256 and 4096.

CLASS can be used to specify the segment class;
this feature indicates to the linker that segments of the same class
should be placed near each other in the output file.
The class name can be any word, e.g. CLASS=CODE.

OVERLAY, like CLASS, is specified with an arbitrary word as an argument,
and provides overlay information to an overlay-capable linker.

Segments can be declared as USE16 or USE32, which has the effect of
recording the choice in the object file and also ensuring that NASM's
default assembly mode when assembling in that segment is 16-bit or 32-bit respectively.

When writing OS/2 object files, you should declare 32-bit segments as FLAT,
which causes the default segment base for anything in the segment to be the special group FLAT,
and also defines the group if it is not already defined.

Natural alignment means if the address is divisble by the data's size
bytes are naturally aligned,
so dwords are aligned on 4 byte boundaries

The CPU accesses naturally aligned data quicker than not
some instructions are made only with naturally 16 byte boundaries

so dwords should be aligned on 4 bytes aka address divisible by 4
and qword on addresses divisible by 8


SSE instructions:
To change or read the value of MXCSR
STMXCSR dword [mem32]
LDMXCSR dword [mem32]

Data movement instructions:
A rule of thumb is to try to keep the same data type in
a single sse register because of the penalty for changing

movd, moves 32 bits, but also 64 bits, the size of the value being moved
is determined by the size of the source operand
if the destination operand is an sse register or x86, then the top is zeroed

movq, moves either the low 64 bits of sse, or 64 of memory to low sse
if the destination is sse, then it zeroes the top

movdqa, move aligned double quad word, moves 128 bits but it must be 16 bytes aligned
movdqu, same but unaligned

mov[a/u][p][s/d], move aligned or unaligned, packed, singles or doubles

mov[s][s/d], move scalar single or double, moves bottom 32/64
if both are sse, then the top is not changed, if the source is memory, the top is zeroed

AVX instructions:
same as SSE except you put a prefix of v* before
the instruction.
Also it supports 3 register instruction so you
dont need to align the store address
dont need to be destructive with the inputs
unlike SSE.
It has upgraded sse by allowing it to be
non distructive with the 128 bit registers.
You can also add a prefix a* before the sufix
if you know that your data is aligned.

CPUID is used to check if the hardware is capable of
performing some of these advanced instructions.
If you run newer instructions on older hardware
you will crash with an illegal instruction error.
AVX512 is not supported by my cpu, checked by CPUID.

AVX512 info:
Introduces a new kind of registers, that are really useful
for branchless programming, the K masks.
K0-K7, altho K0 is not to be used, and they are 64 bits.
kmov*, kadd*, kand*, knot*, kor*, kortest*, kshiftl*, ktest*
kunpck[bw/wd/dq], kx[nor/or]*...
*=[b/w/d/q]
[b/w/d/q]
It had also introduced casting floats to integers, or rounding.
And compressed displacement, which is quite convinient.

arithmetic:
{V}[add/sub/mul/div][u/a/ ][s/p][s/d]

SIMD instructions:

Control-Flow Enforcement Technology Instructions (CET):
endbr64, use for indirect branch tracking (IBT)
ENd BRanch 64-bit, with CET enabled the cpu checks that all
indirect branches land on a valid instruction being endbr64
it otherwise raises control-protection fault

String instructions:
This does NOT operate on a STRING CLASS, as ascii text
it operates on a continious memory (string) of [d/q/ ]words
they also don't need to be null terminated

Store String, stos[b/w/d/q] [mem]
and it always stores strings to rdi, [mem] shows from to point

example:
if you have been passed a character array in rcx then
'''asm
  mov rdi, rcx
  mov al, 'a'
  stosb
  ; then stosb is equal to
  ; mov byte [rdi], al
  ; add rdi, 1
'''
so it writes to rdi, from al
this is for all string operations altho
higher bit versions use higher version of al (rax)

Conditional:
you can use REPcc to repeat a string operation prefix

asm'''
  mov rcx, 5
  rep stosb
'''

would repeat the stosb 5 times based on rcx

Scanning, scas[b/w/d/q]
so for scasb it would be the same as
  add rdi, 1
  cmp al, byte [rdi - 1]
it tells you if rdi is pointing to something that
is the same as al

with rep you can do
rep scanb, which means if equal continue until not equal

Load, lods[b/d/w/q]
it does
  mov al, byte [rsi]
  add rsi, 1

so it loades from rsi, to al
so this uses the rsi, so the SOURCE index
and this function can't be repeated really

Compares, cmps[b/w/d/q]
  cmp [rsi], [rdi]
  add rsi, size
  add rdi, size
and like
  while(rcx!=0)
    dec rcx
    cmp byte [rsi], [rdi]
    jne breakroop
    add rsi, 1
    add rdi, 1
So you can jump out of the loop
when the first values are equal or different

Moves, movs
moves [rdi], [rsi]
  mov byte [rdi], byte [rsi] ; interesting that it does a mov between
  add rsi, 1          ; two memory operands, which is usually impossible
  add rdi, 1

so lets say for an array
  lea rdi, arrayB
  lea rsi, arrayA
  mov rcx, 100
  rep movsd


Optimizations

Instead of using a div instruction, compilers usually
calculate the reciprocal of the value and multiply by it
instead, since that is faster

REX byte

The point of the rex byte is to allow for variants of
instructions in 64 bit mode to access the only byte
registers like spl, bpl, sil, dil and r8l-r15l

Lock Prefix

Makes the address inaccessible during the operation
and makes the instruction atomic, so that it cannot
be interrupted by other cores midway through
They also only work when one operand is memory
Its commonly used for synchronization

SAHF

Stores the contents of ah into
the lower byte of eflags (the status flags)
