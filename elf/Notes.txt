Flags contain 1 bit each, aka boolean
They are *likely?* used to determine some other calls
CF = Carry
PF = Parity
ZF = Zero
SF = Sign
OF = Overflow
AF = Adjust
IF = Interupt Enabled

Pointers, I know this from C:
rip, eip, ip = index pointers
rsp, esp, sp = stack pointers
rbp, ebp, bp = stack base pointers
... much more

Control Flow is the direction of the program flow,
the index pointer (rip) determines which line is next to execute

Control Flow calls:
jmp, changing rip
cmp, used for setting a flag
  a==b sets ZF = 1
  a!=b sets ZF = 0
  SF will be the most significant bit of a-b
Conditional Jumps:
  Pretty much same as bash, equal, not equal, less than...
  and it does depend on flags

'''asm
  cmp rax, 23
  je _doThis
''' 
Moves to the label if rax is equal to 23.

Also
'''asm
  mov rax, rbx ; same as int a = b in C
  mov rax, [rbx]; would do int a = *b in C
''' 
[rbx] is the address, however you can only do this
with 64bit registers, since thats the size of pointers


Calls are pretty much jumps to specific functions,
you need a defined block with a ret at the end.

The stack works with 64 bit values, so when you are 
pushing a value from memory into the stack, you need
to convert it to a qword (quad word is 64 bits).
